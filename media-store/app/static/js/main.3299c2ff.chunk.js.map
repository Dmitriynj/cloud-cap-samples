{"version":3,"sources":["Track.js","handleError.js","GlobalContext.js","TracksPage.js","CurrentPageHeader.js","Header.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["Track","name","composer","unitPrice","isOwned","isSelected","style","borderRadius","title","bordered","fontWeight","handleError","error","ERROR_PAGES","push","response","console","log","status","GlobalContext","createContext","loading","setLoading","useGlobals","useContext","GlobalContextProvider","children","useState","value","useMemo","loadingProp","Provider","Search","Input","Option","Select","API","401","403","500","config","headers","Authorization","TracksContainer","tracks","setTracks","genres","setGenres","setSelectedGenreIDs","history","useHistory","setSearchValue","useEffect","axios","get","then","data","catch","tracksElementsList","map","ID","key","className","span","genresElements","toString","display","flexDirection","alignItems","padding","maxWidth","placeholder","size","onSearch","onChange","mode","values","gutter","xs","sm","md","lg","names","CurrentPageHeader","location","useLocation","margin","Item","pathname","Header","theme","defaultSelectedKeys","onClick","Content","Layout","ErrorPage","message","subTitle","extra","type","MyRouter","marginTop","exact","path","App","height","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3299c2ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card } from \"antd\";\r\nimport { PlusOutlined, MinusOutlined } from \"@ant-design/icons\";\r\n\r\nconst Track = ({ name, composer, unitPrice, isOwned, isSelected }) => {\r\n  return (\r\n    <Card style={{ borderRadius: 6 }} title={name} bordered={false}>\r\n      {composer && (\r\n        <div>\r\n          <span style={{ fontWeight: 600 }}>Compositor:</span> {composer}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <span style={{ fontWeight: 600 }}>Price:</span> {unitPrice}\r\n      </div>\r\n    </Card>\r\n\r\n    // <div style={divStyle}>\r\n    //   <span>{name}</span>\r\n    //   {isOwned && (\r\n    //     <Button type=\"primary\" shape=\"circle\" icon={<PlusOutlined />} />\r\n    //   )}\r\n    //   {isSelected && <Button danger shape=\"circle\" icon={<MinusOutlined />} />}\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport { Track };\r\n","const handleError = (error, ERROR_PAGES, push) => {\r\n  if (error.response) {\r\n    console.log(error.response.status);\r\n    console.log(error.response);\r\n    push(ERROR_PAGES[error.response.status] || \"/error\");\r\n  }\r\n};\r\n\r\nexport { handleError };\r\n","import React, { useMemo, createContext, useContext, useState } from \"react\";\r\nconst globalContext = {\r\n  loading: {},\r\n  setLoading: () => {},\r\n};\r\nconst GlobalContext = createContext(globalContext);\r\nconst useGlobals = () => useContext(GlobalContext);\r\n\r\nconst GlobalContextProvider = ({ children }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const value = useMemo(\r\n    () => ({\r\n      loading: loading,\r\n      setLoading: (loadingProp) => setLoading(loadingProp),\r\n    }),\r\n    [loading]\r\n  );\r\n\r\n  return (\r\n    <GlobalContext.Provider value={value}>{children}</GlobalContext.Provider>\r\n  );\r\n};\r\n\r\nexport { GlobalContextProvider, useGlobals };\r\n","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Input, Col, Row, Select } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { Track } from \"./Track\";\r\nimport { handleError } from \"./handleError\";\r\nimport \"./TracksPage.css\";\r\nimport { useGlobals } from \"./GlobalContext\";\r\n\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\nconst API = \"http://localhost:4004\";\r\nconst ERROR_PAGES = {\r\n  401: \"/unauthorized\",\r\n  403: \"/forbidden\",\r\n  500: \"/internal-error\",\r\n};\r\n\r\n// only for dev\r\nconst config = {\r\n  headers: {\r\n    Authorization: \"Basic dXNlcjA6\",\r\n  },\r\n};\r\n\r\nconst TracksContainer = () => {\r\n  const [tracks, setTracks] = useState([]);\r\n  const [genres, setGenres] = useState([]);\r\n  const [selectedGenreIDs, setSelectedGenreIDs] = useState([]);\r\n  const { setLoading } = useGlobals();\r\n  const history = useHistory();\r\n  const [isMyTracks, setIsMyStracks] = useState(false);\r\n  const [searchValue, setSearchValue] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    axios\r\n      .get(`${API}/browse-tracks/Tracks`, config)\r\n      .then((response) => setTracks(response.data.value))\r\n      .catch((error) => handleError(error, ERROR_PAGES, history.push))\r\n      .then(() => setLoading(false));\r\n\r\n    axios\r\n      .get(`${API}/browse-tracks/Genres`, config)\r\n      .then((response) => setGenres(response.data.value))\r\n      .catch((error) => handleError(error, ERROR_PAGES, history.push))\r\n      .then(() => setLoading(false));\r\n  }, []);\r\n\r\n  const onSearch = (value) => {\r\n    setLoading(true);\r\n    // const genreIfExists = selectedGenreIDs\r\n    axios\r\n      .get(`${API}/browse-tracks/Tracks?$filter=contains(name,'${value}')`, {\r\n        ...config,\r\n      })\r\n      .then((response) => setTracks(response.data.value))\r\n      .catch((error) => handleError(error, ERROR_PAGES, history.push))\r\n      .then(() => setLoading(false));\r\n  };\r\n\r\n  const onSelectChange = (values) => {\r\n    setSelectedGenreIDs(values);\r\n  };\r\n\r\n  const tracksElementsList = tracks\r\n    ? tracks.map(({ ID, name, composer, unitPrice }) => {\r\n        return (\r\n          <Col key={ID} className=\"gutter-row\" span={8}>\r\n            <Track name={name} composer={composer} unitPrice={unitPrice} />\r\n          </Col>\r\n        );\r\n      })\r\n    : \"Please, check your connection\";\r\n\r\n  const genresElements = genres\r\n    ? genres.map(({ ID, name }) => {\r\n        return (\r\n          <Option key={ID} value={ID.toString()}>\r\n            {name}\r\n          </Option>\r\n        );\r\n      })\r\n    : [];\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <Search\r\n          style={{\r\n            padding: 5,\r\n            borderRadius: 6,\r\n            maxWidth: 400,\r\n          }}\r\n          placeholder=\"Search tracks\"\r\n          size=\"large\"\r\n          onSearch={onSearch}\r\n          onChange={setSearchValue}\r\n        />\r\n        <Select\r\n          mode=\"tags\"\r\n          style={{ padding: 5, borderRadius: 6, \"min-width\": 100 }}\r\n          placeholder=\"Tag\"\r\n          onChange={onSelectChange}\r\n        >\r\n          {genresElements}\r\n        </Select>\r\n      </div>\r\n      {/* <Divider orientation=\"left\">Popular now</Divider> */}\r\n      <div>\r\n        <Row gutter={[{ xs: 8, sm: 16, md: 24, lg: 32 }, 24]}>\r\n          {tracksElementsList}\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { TracksContainer };\r\n","import React from \"react\";\r\nimport { Breadcrumb, Spin } from \"antd\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useGlobals } from \"./GlobalContext\";\r\n\r\nconst names = {\r\n  \"/\": \"Browse / Tracks\",\r\n  \"/account\": \"Account\",\r\n  \"/manage\": \"Manage Orders\",\r\n};\r\n\r\nconst CurrentPageHeader = () => {\r\n  const location = useLocation();\r\n  const { loading } = useGlobals();\r\n\r\n  return (\r\n    <Breadcrumb style={{ margin: \"16px  \" }}>\r\n      <Breadcrumb.Item>{names[location.pathname]}</Breadcrumb.Item>\r\n      <Breadcrumb.Item>{loading && <Spin />}</Breadcrumb.Item>\r\n    </Breadcrumb>\r\n  );\r\n};\r\n\r\nexport { CurrentPageHeader };\r\n","import React from \"react\";\r\nimport { Menu } from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Menu theme=\"light\" mode=\"horizontal\" defaultSelectedKeys={[\"2\"]}>\r\n      <Menu.Item key=\"1\" onClick={() => history.push(\"/\")}>\r\n        Browse\r\n      </Menu.Item>\r\n\r\n      <Menu.Item key=\"2\" onClick={() => history.push(\"/person\")}>\r\n        Profile\r\n      </Menu.Item>\r\n      <Menu.Item key=\"3\" onClick={() => history.push(\"/manage-orders\")}>\r\n        Manage orders\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport { Header };\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  useHistory,\r\n} from \"react-router-dom\";\r\nimport { Result, Button, Layout } from \"antd\";\r\nimport { TracksContainer } from \"./TracksPage\";\r\nimport { CurrentPageHeader } from \"./CurrentPageHeader\";\r\nimport { Header } from \"./Header\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst ErrorPage = ({ status, message }) => {\r\n  const history = useHistory();\r\n\r\n  const onGoHome = () => {\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <Result\r\n      status={status}\r\n      title={status}\r\n      subTitle={message}\r\n      extra={\r\n        <Button onClick={onGoHome} type=\"primary\">\r\n          Back Home\r\n        </Button>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nconst MyRouter = () => {\r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <Content\r\n        className=\"site-layout\"\r\n        style={{ padding: \"0 50px\", marginTop: 20 }}\r\n      >\r\n        <div style={{ padding: \"24px\" }}>\r\n          <CurrentPageHeader />\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <TracksContainer />\r\n            </Route>\r\n            {/* <Route path=\"/confirm/:token\" /> */}\r\n            <Route path=\"/internal-error\">\r\n              <ErrorPage\r\n                status={500}\r\n                message={\"Sorry, something went wrong.\"}\r\n              />\r\n            </Route>\r\n            <Route path=\"/forbidden\">\r\n              <ErrorPage\r\n                status={403}\r\n                message={\"Sorry, you are not able to get this resourse.\"}\r\n              />\r\n            </Route>\r\n            <Route path=\"/unauthorized\">\r\n              <ErrorPage\r\n                status={\"error\"}\r\n                message={\r\n                  \"401, Sorry, you are not authorized to access this page.\"\r\n                }\r\n              />\r\n            </Route>\r\n            <Route path=\"/error\">\r\n              <ErrorPage\r\n                status={\"error\"}\r\n                message={\"Sorry, something went wrong\"}\r\n              />\r\n            </Route>\r\n            <Route>\r\n              <ErrorPage\r\n                status={404}\r\n                message={\"Sorry, the page you visited does not exist.\"}\r\n              />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Content>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport { MyRouter };\r\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport { Layout } from \"antd\";\nimport { MyRouter } from \"./Router\";\nimport { GlobalContextProvider } from \"./GlobalContext\";\n\nconst App = () => {\n  return (\n    <Layout style={{ height: \"100%\" }}>\n      <GlobalContextProvider>\n        <MyRouter />\n      </GlobalContextProvider>\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}